spring:
  application:
    name: project-service
  cloud:
    discovery:
      enabled: true

  # Async timeout configuration for long-running SSE connections
  mvc:
    async:
      request-timeout: -1  # No timeout for async requests

  datasource:
    url: jdbc:postgresql://localhost:${PROJECT_DB_PORT}/projectDB
    username: ${PROJECT_DB_USER}
    password: ${PROJECT_DB_PASSWORD}
    driver-class-name: org.postgresql.Driver
    hikari:
      minimum-idle: 3
      maximum-pool-size: 5

  # JPA configuration
  jpa:
    hibernate:
      ddl-auto: create-drop
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        use_sql_comments: true
        jdbc:
          time_zone: UTC

  # Disable Flyway completely
  flyway:
    enabled: false

  rabbitmq:
    host: ${RABBITMQ_HOST:localhost}
    port: ${RABBITMQ_PORT:5672}
    username: ${RABBITMQ_USER}
    password: ${RABBITMQ_PASSWORD}

server:
  port: 8083
  error:
    include-message: always
    include-binding-errors: always
    include-stacktrace: never
    include-exception: false
  tomcat:
    connection-timeout: 600000  # 10 minutes timeout for connections

eureka:
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka/
    register-with-eureka: true
    fetch-registry: true
  instance:
    hostname: localhost


management:
  info:
    git:
      mode: full
  endpoints:
    web:
      exposure:
        include: health,info,prometheus,metrics
      base-path: /actuator
  endpoint:
    health:
      show-details: always
      probes:
        enabled: true
  metrics:
    tags:
      application: "${spring.application.name}"
  tracing:
    enabled: false
    sampling:
      probability: 1

springdoc:
  api-docs:
    enabled: true
  show-actuator: true
  use-management-port: false
  swagger-ui:
    path: /docs
    # Enable authorization persistence in browser
    persistAuthorization: true
    # Enable deep linking for swagger operations
    deepLinking: true
    # Display request duration in swagger UI
    displayRequestDuration: true
    # Enable filtering of operations
    filter: true
    # Show common extensions
    showExtensions: true
    # Sort operations alphabetically
    operationsSorter: alpha
    # Sort tags alphabetically
    tagsSorter: alpha
    # Enable try it out by default
    tryItOutEnabled: true

gemini:
  api-key: ${GEMINI_API_KEY:your-gemini-api-key-here}
  api-url: ${GEMINI_API_URL:https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-lite:generateContent}   

# Resilience4j Configuration for Gemini API - Optimized for Speed
resilience4j:
  retry:
    instances:
      gemini-api:
        maxAttempts: 5
        waitDuration: 200ms
        enableExponentialBackoff: true
        exponentialBackoffMultiplier: 1.5
        retryExceptions:
          - org.springframework.web.client.HttpServerErrorException.ServiceUnavailable
          - org.springframework.web.client.HttpServerErrorException.InternalServerError
          - org.springframework.web.client.ResourceAccessException
          - org.springframework.web.client.HttpClientErrorException.TooManyRequests
          - java.net.SocketTimeoutException
          - java.net.ConnectException

  circuitbreaker:
    instances:
      gemini-api:
        slidingWindowSize: 5                    # Smaller window for faster detection
        minimumNumberOfCalls: 3                 # Fewer calls needed to trigger
        failureRateThreshold: 60                # Higher threshold (60% failures before opening)
        waitDurationInOpenState: 10s            # Faster recovery (10s vs 30s)
        permittedNumberOfCallsInHalfOpenState: 2 # Fewer test calls
  ratelimiter:
    instances:
      gemini-api:
        limitForPeriod: 15                      # Higher rate limit (15 vs 10)
        limitRefreshPeriod: 500ms               # Faster refresh (500ms vs 1s)
        timeoutDuration: 2s                     # Faster timeout (2s vs 5s)

scholarai:
  spring:
    user-service-url: http://localhost:8081
  fastapi:
    papersearch-url: http://localhost:8001
    extractor-url: http://localhost:8002
  notes:
    images:
      upload-path: ${NOTES_IMAGES_PATH:./uploads/note-images}
      max-size: ${NOTES_IMAGES_MAX_SIZE:10485760} # 10MB
  rabbitmq:
    exchange: scholarai.exchange
    web-search:
      queue: scholarai.websearch.queue
      routing-key: scholarai.websearch
      completed-queue: scholarai.websearch.completed.queue
      completed-routing-key: scholarai.websearch.completed
    extraction:
      queue: scholarai.extraction.queue
      routing-key: scholarai.extraction
      completed-queue: scholarai.extraction.completed.queue
      completed-routing-key: scholarai.extraction.completed
    gap-analysis:
      request-queue: gap_analysis_requests
      request-routing-key: gap.analysis.request
      response-queue: gap_analysis_responses
      response-exchange: gap_analysis_responses
      response-routing-key: gap.analysis.response




logging:
  level:
    root: INFO
    org.springframework.web: DEBUG
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE
    org.springframework.security: DEBUG

    # Completely silence Eureka-related logs
    com.netflix.discovery: ERROR
    com.netflix.eureka: ERROR
    org.springframework.cloud.netflix.eureka: ERROR
    org.springframework.cloud.client.discovery: ERROR
    com.netflix.discovery.shared.transport: ERROR
    com.netflix.discovery.InstanceInfoReplicator: ERROR

